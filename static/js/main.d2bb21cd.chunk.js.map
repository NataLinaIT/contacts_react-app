{"version":3,"sources":["components/CopyToClipboardText/index.js","constants/nationality.js","pages/Contacts/ContactsTable/ContactsTable.js","pages/Contacts/constants.js","pages/Contacts/ToggleDataViewMode/index.js","pages/Contacts/useDataViewMode.js","pages/Contacts/index.js","pages/Contacts/useContacts.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","createStyles","root","cursor","icon","marginRight","spacing","STATUS_COPY","TITLE_BY_STATUS","CopyToClipboardText","text","classes","useCopyToClipboard","CopyToClipboard","useState","statusCopy","setStatusCopy","onClickCopy","useCallback","onClickAway","ClickAwayListener","Tooltip","title","placement","arrow","Button","display","align","className","onClick","fontSize","NATIONALITIES","NATIONALITIES_HUMAN_NAME","table","ContactsTable","data","TableContainer","component","Paper","data-testid","Table","size","aria-label","TableHead","TableRow","TableCell","TableBody","map","contact","scope","Avatar","src","picture","thumbnail","alt","name","first","last","Typography","format","parseISO","dob","date","age","email","phone","location","country","city","street","number","nat","login","uuid","DATA_VIEW_MODES","ToggleDataViewMode","dataViewMode","setDataViewMode","handleChangeViewMode","_","nextView","ToggleButtonGroup","value","exclusive","onChange","ToggleButton","getInitialDataViewMode","localStorage","getItem","marginTop","headContainer","marginBottom","Contacts","contacts","setData","isLoading","setLoading","isError","setIsError","useEffect","a","fetch","response","json","results","error","Error","getContacts","useContacts","setItem","useDataVieMode","Container","Grid","container","item","xs","Box","justifyContent","variant","CircularProgress","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"2ZAYMA,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,OAAQ,WAEVC,KAAM,CACJC,YAAaL,EAAMM,QAAQ,SAK3BC,EACE,OADFA,EAEI,SAGJC,GAAe,mBAClBD,EAAmB,QADD,cAElBA,EAAqB,UAFH,GAKRE,EAAsB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC9BC,EAAUb,IAD+B,EAEnBc,cAAnBC,EAFsC,sBAGXC,mBAAS,QAHE,mBAGxCC,EAHwC,KAG5BC,EAH4B,KAKzCC,EAAcC,uBAAY,WAC9BL,EAAgBH,GAChBM,EAAcT,KACb,CAACM,EAAiBH,IAEfS,EAAcD,uBAAY,WAC9BF,EAAcT,KACb,CAACS,IAEJ,OACE,cAACI,EAAA,EAAD,CAAmBD,YAAaA,EAAhC,SACE,cAACE,EAAA,EAAD,CAASC,MAAOd,EAAgBO,GAAaQ,UAAU,MAAMC,OAAK,EAAlE,SACE,eAACC,EAAA,EAAD,CACEC,QAAQ,OACRC,MAAM,SACNC,UAAWjB,EAAQT,KACnB2B,QAASZ,EAJX,UAME,cAAC,IAAD,CAAsBa,SAAS,QAAQF,UAAWjB,EAAQP,OACzDM,UCzDEqB,EACP,KADOA,EAEP,KAFOA,EAGP,KAHOA,EAIP,KAJOA,EAKP,KALOA,EAMP,KANOA,EAOP,KAPOA,EAQP,KAROA,EASP,KATOA,EAUP,KAVOA,EAWP,KAXOA,EAYP,KAZOA,EAaP,KAbOA,EAcP,KAdOA,GAeP,KAfOA,GAgBP,KAhBOA,GAiBP,KAEOC,IAAwB,mBAClCD,EAAmB,cADe,cAElCA,EAAmB,aAFe,cAGlCA,EAAmB,YAHe,cAIlCA,EAAmB,WAJe,cAKlCA,EAAmB,UALe,cAMlCA,EAAmB,UANe,cAOlCA,EAAmB,WAPe,cAQlCA,EAAmB,WARe,cASlCA,EAAmB,UATe,cAUlCA,EAAmB,WAVe,cAWlCA,EAAmB,SAXe,cAYlCA,EAAmB,WAZe,cAalCA,EAAmB,aAbe,cAclCA,EAAmB,SAde,cAelCA,GAAmB,eAfe,cAgBlCA,GAAmB,WAhBe,cAiBlCA,GAAmB,YAjBe,GCL/BjC,GAAYC,YAAW,CAC3BkC,MAAO,KAGIC,GAAgB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC1BxB,EAAUb,KAEd,OACE,cAACsC,EAAA,EAAD,CAAgBC,UAAWC,IAAOC,cAAY,2BAA9C,SACE,eAACC,EAAA,EAAD,CAAOZ,UAAWjB,EAAQsB,MAAOQ,KAAK,QAAQC,aAAW,iBAAzD,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,qBACA,cAACA,EAAA,EAAD,wBACA,cAACA,EAAA,EAAD,uBACA,cAACA,EAAA,EAAD,oBACA,cAACA,EAAA,EAAD,oBACA,cAACA,EAAA,EAAD,uBACA,cAACA,EAAA,EAAD,+BAGJ,cAACC,EAAA,EAAD,UACGX,EAAKY,KAAI,SAACC,GAAD,OACR,eAACJ,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWR,UAAU,KAAKY,MAAM,MAAhC,SACE,cAACC,EAAA,EAAD,CAAQC,IAAKH,EAAQI,QAAQC,UAAWC,IAAI,aAE9C,eAACT,EAAA,EAAD,WACGG,EAAQO,KAAKjC,MADhB,IACwB0B,EAAQO,KAAKC,MADrC,IAC6CR,EAAQO,KAAKE,QAE1D,eAACZ,EAAA,EAAD,WACE,cAACa,EAAA,EAAD,UACGC,YAAOC,YAASZ,EAAQa,IAAIC,MAAO,gBAEtC,cAACJ,EAAA,EAAD,UAAaV,EAAQa,IAAIE,SAE3B,cAAClB,EAAA,EAAD,UAAYG,EAAQgB,QACpB,cAACnB,EAAA,EAAD,UACE,cAAC,EAAD,CAAqBnC,KAAMsC,EAAQiB,UAErC,eAACpB,EAAA,EAAD,WACE,cAACa,EAAA,EAAD,UAAaV,EAAQkB,SAASC,UAC9B,eAACT,EAAA,EAAD,WACGV,EAAQkB,SAASE,KADpB,IAC2BpB,EAAQkB,SAASG,OAAOd,KADnD,IAEGP,EAAQkB,SAASG,OAAOC,aAG7B,cAACzB,EAAA,EAAD,UAAYb,GAAyBgB,EAAQuB,SAxBhCvB,EAAQwB,MAAMC,iB,gFCrC5BC,GACJ,QADIA,GAEL,OCMKC,GAAqB,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,gBAC3CC,EAAuB5D,uBAC3B,SAAC6D,EAAGC,GACFH,EAAgBG,KAElB,CAACH,IAGH,OACE,eAACI,GAAA,EAAD,CACEC,MAAON,EACPO,WAAS,EACTC,SAAUN,EAHZ,UAKE,cAACO,GAAA,EAAD,CACEH,MAAOR,GACPhC,aAAYgC,GACZnC,cAAY,6BAHd,SAKE,cAAC,KAAD,MAEF,cAAC8C,GAAA,EAAD,CACEH,MAAOR,GACPhC,aAAYgC,GACZnC,cAAY,8BAHd,SAKE,cAAC,KAAD,UC/BF+C,GAAyB,WAC7B,OAAOC,aAAaC,QAAQ,iBAAmBd,ICM3C5E,GAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJuF,UAAWzF,EAAMM,QAAQ,IAE3BoF,cAAe,CACbC,aAAc3F,EAAMM,QAAQ,SAKrBsF,GAAW,WACtB,IAAMjF,EAAUb,KACV+F,ECrBmB,WAAO,IAAD,EACP/E,mBAAS,IADF,mBACxBqB,EADwB,KAClB2D,EADkB,OAEChF,oBAAS,GAFV,mBAExBiF,EAFwB,KAEbC,EAFa,OAGDlF,oBAAS,GAHR,mBAGxBmF,EAHwB,KAGfC,EAHe,KAyB/B,OApBAC,qBAAU,YACS,uCAAG,kCAAAC,EAAA,6DAClBJ,GAAW,GADO,kBAGOK,MAAM,yCAHb,cAGVC,EAHU,gBAIiBA,EAASC,OAJ1B,mBAIRC,EAJQ,EAIRA,UAASC,EAJD,EAICA,OAJD,uBAMR,IAAIC,MAAMD,GANF,QAQhBX,EAAQU,GACRN,GAAW,GATK,kDAWhBA,GAAW,GAXK,yBAahBF,GAAW,GAbK,6EAAH,oDAgBjBW,KACC,IAEI,CACLxE,OACA4D,YACAE,WDPeW,GAFW,EDdA,WAAO,IAAD,EACM9F,mBAASwE,IADf,mBAC3BV,EAD2B,KACbC,EADa,KAOlC,OAJAsB,qBAAU,WACRZ,aAAasB,QAAQ,eAAgBjC,KACpC,CAACA,IAEG,CAACA,EAAcC,GCUkBiC,GAHZ,mBAGrBlC,EAHqB,KAGPC,EAHO,KAK5B,OACE,cAACkC,GAAA,EAAD,CAAWnF,UAAWjB,EAAQT,KAA9B,SACE,eAAC8G,GAAA,EAAD,CAAMC,WAAS,EAAf,UACE,cAACD,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIvF,UAAWjB,EAAQ+E,cAAtC,SACE,eAAC0B,EAAA,EAAD,CAAK1F,QAAQ,OAAO2F,eAAe,gBAAnC,UACE,cAAC3D,EAAA,EAAD,CAAY4D,QAAQ,KAAKjF,UAAU,KAAnC,sBAGA,cAAC,GAAD,CACEuC,aAAcA,EACdC,gBAAiBA,SAIvB,cAACmC,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SAEQtB,EAASE,UACJ,cAACwB,EAAA,EAAD,CAAkBhF,cAAY,oBAEnCsD,EAASI,QACJ,qBAAK1D,cAAY,iBAAjB,uBAELqC,IAAiBF,GACZ,cAAC,GAAD,CAAevC,KAAM0D,EAAS1D,OAEnCyC,IAAiBF,GACZ,qBAAKnC,cAAY,0BAAjB,kBAGF,aErDZ,SAASiF,KACd,OACE,8BACE,cAAC,GAAD,MCLN,IAYeC,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OAAO,cAACX,GAAD,IAASY,SAASC,eAAe,SAKjDZ,O","file":"static/js/main.d2bb21cd.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\nimport {\n  ClickAwayListener,\n  createStyles,\n  makeStyles,\n  Tooltip,\n} from \"@material-ui/core\";\nimport { useCopyToClipboard } from \"react-use\";\nimport Button from \"@material-ui/core/Button\";\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\";\nimport { useCallback, useState } from \"react\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      cursor: \"pointer\",\n    },\n    icon: {\n      marginRight: theme.spacing(3),\n    },\n  })\n);\n\nconst STATUS_COPY = {\n  COPY: \"copy\",\n  COPIED: \"copied\",\n};\n\nconst TITLE_BY_STATUS = {\n  [STATUS_COPY.COPY]: \"Copy\",\n  [STATUS_COPY.COPIED]: \"Copied\",\n};\n\nexport const CopyToClipboardText = ({ text }) => {\n  const classes = useStyles();\n  const [, CopyToClipboard] = useCopyToClipboard();\n  const [statusCopy, setStatusCopy] = useState(\"copy\");\n\n  const onClickCopy = useCallback(() => {\n    CopyToClipboard(text);\n    setStatusCopy(STATUS_COPY.COPIED);\n  }, [CopyToClipboard, text]);\n\n  const onClickAway = useCallback(() => {\n    setStatusCopy(STATUS_COPY.COPY);\n  }, [setStatusCopy]);\n\n  return (\n    <ClickAwayListener onClickAway={onClickAway}>\n      <Tooltip title={TITLE_BY_STATUS[statusCopy]} placement=\"top\" arrow>\n        <Button\n          display=\"flex\"\n          align=\"center\"\n          className={classes.root}\n          onClick={onClickCopy}\n        >\n          <FileCopyOutlinedIcon fontSize=\"small\" className={classes.icon} />\n          {text}\n        </Button>\n      </Tooltip>\n    </ClickAwayListener>\n  );\n};\n\nCopyToClipboardText.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n","export const NATIONALITIES = {\n  AU: \"AU\",\n  BR: \"BR\",\n  CA: \"CA\",\n  CH: \"CH\",\n  DE: \"DE\",\n  DK: \"DK\",\n  ES: \"ES\",\n  FI: \"FI\",\n  FR: \"FR\",\n  GB: \"GB\",\n  IE: \"IE\",\n  IR: \"IR\",\n  NO: \"NO\",\n  NL: \"NL\",\n  NZ: \"NZ\",\n  TR: \"TR\",\n  US: \"US\",\n};\nexport const NATIONALITIES_HUMAN_NAME = {\n  [NATIONALITIES.AU]: \"Australian\",\n  [NATIONALITIES.BR]: \"Brazilian\",\n  [NATIONALITIES.CA]: \"Canadian\",\n  [NATIONALITIES.CH]: \"Chinese\",\n  [NATIONALITIES.DE]: \"German\",\n  [NATIONALITIES.DK]: \"Danish\",\n  [NATIONALITIES.ES]: \"Spanish\",\n  [NATIONALITIES.FI]: \"Finnish\",\n  [NATIONALITIES.FR]: \"French\",\n  [NATIONALITIES.GB]: \"British\",\n  [NATIONALITIES.IE]: \"Irish\",\n  [NATIONALITIES.IR]: \"Iranian\",\n  [NATIONALITIES.NO]: \"Norwegian\",\n  [NATIONALITIES.NL]: \"Dutch\",\n  [NATIONALITIES.NZ]: \"New Zealand\",\n  [NATIONALITIES.TR]: \"Turkish\",\n  [NATIONALITIES.US]: \"American\",\n};\n","import format from \"date-fns/format\";\nimport parseISO from \"date-fns/parseISO\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { Avatar, Typography } from \"@material-ui/core\";\nimport { CopyToClipboardText } from \"../../../components/CopyToClipboardText\";\nimport { NATIONALITIES_HUMAN_NAME } from \"../../../constants/nationality\";\n\nconst useStyles = makeStyles({\n  table: {},\n});\n\nexport const ContactsTable = ({ data }) => {\n  let classes = useStyles();\n\n  return (\n    <TableContainer component={Paper} data-testid=\"contacts-table-container\">\n      <Table className={classes.table} size=\"small\" aria-label=\"contacts table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Avatar</TableCell>\n            <TableCell>Full name</TableCell>\n            <TableCell>Birthday</TableCell>\n            <TableCell>Email</TableCell>\n            <TableCell>Phone</TableCell>\n            <TableCell>Location</TableCell>\n            <TableCell>Nationality</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {data.map((contact) => (\n            <TableRow key={contact.login.uuid}>\n              <TableCell component=\"th\" scope=\"row\">\n                <Avatar src={contact.picture.thumbnail} alt=\"avatar\" />\n              </TableCell>\n              <TableCell>\n                {contact.name.title} {contact.name.first} {contact.name.last}\n              </TableCell>\n              <TableCell>\n                <Typography>\n                  {format(parseISO(contact.dob.date), \"MM/dd/yyyy\")}\n                </Typography>\n                <Typography>{contact.dob.age}</Typography>\n              </TableCell>\n              <TableCell>{contact.email}</TableCell>\n              <TableCell>\n                <CopyToClipboardText text={contact.phone} />\n              </TableCell>\n              <TableCell>\n                <Typography>{contact.location.country}</Typography>\n                <Typography>\n                  {contact.location.city},{contact.location.street.name},\n                  {contact.location.street.number}\n                </Typography>\n              </TableCell>\n              <TableCell>{NATIONALITIES_HUMAN_NAME[contact.nat]}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n","export const DATA_VIEW_MODES = {\n  TABLE: \"table\",\n  GRID: \"grid\",\n};","import { useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ViewListIcon from \"@material-ui/icons/ViewList\";\nimport ViewModuleIcon from \"@material-ui/icons/ViewModule\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport { DATA_VIEW_MODES } from \"../constants\";\n\nexport const ToggleDataViewMode = ({ dataViewMode, setDataViewMode }) => {\n  const handleChangeViewMode = useCallback(\n    (_, nextView) => {\n      setDataViewMode(nextView);\n    },\n    [setDataViewMode]\n  );\n\n  return (\n    <ToggleButtonGroup\n      value={dataViewMode}\n      exclusive\n      onChange={handleChangeViewMode}\n    >\n      <ToggleButton\n        value={DATA_VIEW_MODES.GRID}\n        aria-label={DATA_VIEW_MODES.GRID}\n        data-testid=\"toggle-data-view-mode-grid\"\n      >\n        <ViewModuleIcon />\n      </ToggleButton>\n      <ToggleButton\n        value={DATA_VIEW_MODES.TABLE}\n        aria-label={DATA_VIEW_MODES.TABLE}\n        data-testid=\"toggle-data-view-mode-table\"\n      >\n        <ViewListIcon />\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n};\n\nToggleDataViewMode.propTypes = {\n  dataViewMode: PropTypes.oneOf([DATA_VIEW_MODES.TABLE, DATA_VIEW_MODES.GRID])\n    .isRequired,\n  setDataViewMode: PropTypes.func.isRequired,\n};\n","import { useState, useEffect } from \"react\";\nimport { DATA_VIEW_MODES } from \"./constants\";\n\nconst getInitialDataViewMode = () => {\n  return localStorage.getItem(\"dataViewMode\") || DATA_VIEW_MODES.TABLE;\n};\n\nexport const useDataVieMode = () => {\n  const [dataViewMode, setDataViewMode] = useState(getInitialDataViewMode);\n\n  useEffect(() => {\n    localStorage.setItem(\"dataViewMode\", dataViewMode);\n  }, [dataViewMode]);\n\n  return [dataViewMode, setDataViewMode];\n};\n","import { useContacts } from \"./useContacts\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport { Box, CircularProgress, Typography } from \"@material-ui/core\";\nimport { ContactsTable } from \"./ContactsTable/ContactsTable\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Container from \"@material-ui/core/Container\";\nimport { ToggleDataViewMode } from \"./ToggleDataViewMode\";\nimport { DATA_VIEW_MODES } from \"./constants\";\nimport { useDataVieMode } from \"./useDataViewMode\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      marginTop: theme.spacing(4),\n    },\n    headContainer: {\n      marginBottom: theme.spacing(3),\n    },\n  })\n);\n\nexport const Contacts = () => {\n  const classes = useStyles();\n  const contacts = useContacts();\n  const [dataViewMode, setDataViewMode] = useDataVieMode();\n\n  return (\n    <Container className={classes.root}>\n      <Grid container>\n        <Grid item xs={12} className={classes.headContainer}>\n          <Box display=\"flex\" justifyContent=\"space-between\">\n            <Typography variant=\"h4\" component=\"h4\">\n              Contacts\n            </Typography>\n            <ToggleDataViewMode\n              dataViewMode={dataViewMode}\n              setDataViewMode={setDataViewMode}\n            />\n          </Box>\n        </Grid>\n        <Grid item xs={12}>\n          {(() => {\n            if (contacts.isLoading) {\n              return <CircularProgress data-testid=\"contacts-loader\"/>;\n            }\n            if (contacts.isError) {\n              return <div data-testid=\"contacts-error\">... error</div>;\n            }\n            if (dataViewMode === DATA_VIEW_MODES.TABLE) {\n              return <ContactsTable data={contacts.data} />;\n            }\n            if (dataViewMode === DATA_VIEW_MODES.GRID) {\n              return <div data-testid=\"contacts-grid-container\">grid</div>;\n            }\n\n            return null;\n          })()}\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n","import { useState, useEffect } from \"react\";\n\nexport const useContacts = () => {\n  const [data, setData] = useState([]);\n  const [isLoading, setLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    const getContacts = async () => {\n      setLoading(true);\n      try {\n        const response = await fetch(\"https://randomuser.me/api/?results=10\");\n        const { results, error } = await response.json();\n        if (error) {\n          throw new Error(error);\n        }\n        setData(results);\n        setIsError(false);\n      } catch (e) {\n        setIsError(true);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getContacts();\n  }, []);\n\n  return {\n    data,\n    isLoading,\n    isError,\n  };\n};\n\n","import { Contacts } from \"./pages/Contacts\";\n\nexport function App() {\n  return (\n    <div>\n      <Contacts />\n    </div>\n  );\n}\n\n \n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}